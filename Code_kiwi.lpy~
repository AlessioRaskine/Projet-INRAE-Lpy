# Distributed System Transport Model
#test git
from math import sin
from math import sqrt
import copy
#Constantes du document constant.h

#ifndef __CONSTANTS_H__
#define __CONSTANTS_H__

#defines pertinent to computation
INFTY     = 1e10      # very large number
EPSILON   = 1.0/INFTY # very small number different from zero
DT        = 0.04166666666666666666667      #time step (days), 1 hour
#const double DT        = 0.1;       # time step (days)
MAXERROR  = 1e-4     # error threshold for evaluating carbon flow
MAXERRORH = 1e-2      # error threshold for evaluating carbon flow
ENV_STEP  = 1.0       # when to compute light distribution (days) (keep as 1 for now!!!)
VIS_STEP  = 1.0       # when to visualise model (days)
OUT_STEP  = 0.04166666666666666666667      # when to write model output to a file
PI        = 3.14159265358979323846264 # PI

#constant source and sink
SOURCEj = 0.53;   	    # [g h-1] maximum initial influx from the source (for initialization of the system)
SINKj = 0.5;	    # [g h-1] maximun influx into the terminal sink
c0 = 0.4;               # [g cm-3] initial carbon concentration 
SOURCEcp = c0*c0/2.0;   #calculate carbon potential for c0

#defines pertinent to phloem resistance
R0 = 0.847E-3;	    #[MPa cm-4 h]
R = 0.024298245614035;  #[MPa cm3 g-1 K-1]
T = 293.15;             #[K]

# -------------------------------------------------------------------------- 

#Fonctions du document function.h

# This file contains print functions, sink/source functions, phloem resistance and osmotic pressure functions 
# If you make any changes, don't forget to save it before running the model. 

#ifndef _FUNCTIONS_H
#define _FUNCTIONS_H
#include <cstdarg>

# -------------------------------------------------------------------------- 
#                         File print functions
# -------------------------------------------------------------------------- 


def FInit (filename,format_, *args ):
  stream = open(filename,"w+")
  stream.write(format_.format(*args))
  stream.close()

def FPrintf (filename,format_, *args ):
  stream = open(filename,"a+")
  stream.write(format_.format(*args))
  stream.close()

# -------------------------------------------------------------------------- 
#                       Common sink/source functions
# -------------------------------------------------------------------------- 


def SinkUnloading (cp,q):
  """
  Michaelis-Menton function expressed in cp, defines carbon unloading
  cp is carbon potential cp=c^2/2, (g^2 C / cm^6
  q is priority parameter (g C / cm^3
  """
  c = sqrt(2.0*cp) # carbon concentration at the top of the nod
  return ((c / (q + c)))


def dSinkUnloading_dcp (cp,q):
  """
  Defines the derivative  of carbon unloading function with respect to 'cp',  
  df/dcp=(df/dcp)*(dcp/dv)=(df/dcp)*(1/cp)
  cp is carbon potential cp=c^2/2, (g^2 C / cm^6)
  q is priority parameter (g C / cm^3)
  """
  c = sqrt(2.0*cp);
  return (q / ((q + c)*(q + c) * (c + 0.001))) # added 0.001 to avoid dividing by 0.


def SourceLoading (cp,q):
  """ 
  cp is carbon potential cp=c^2/2 (g^2 C / cm^6)
  q is loading rate parameter
  """
  c = sqrt(2.0*cp)
  #source loading = -1 + (c / (q + c))
  return (-1.0 + c / (q + c))


def dSourceLoading_dcp (cp,q):
  """
  defines the derivative of carbon loading function with respect to 'cp'
  """
  c = sqrt(2.0*cp)
  return (q / ((q + c) * (q + c) * (c + 0.001)))


# -------------------------------------------------------------------------- 
#       Functions relevant to phloem resistance and osmotic pressure 
# -------------------------------------------------------------------------- 

#Phloem resistance ratio R/R0 (return float from float cab)     
def PhloemResistanceRatio (cab):
  k1 = 0.19961
  k2 = 1.00954
  k3 = -2.2249
  k4 = 1.2776
  
  return (1.0+k1*cab+k2*cab*cab)/(1.0+k3*cab+k4*cab*cab)
#Osmotic pressure ratio P/RT (return float from float cab)

def PressureRatio (cab):
  a = 1.03913
  b = 0.86536
  c = 5.2465
  
  return (a + b*cab + c*cab*cab)		 
# -------------------------------------------------------------------------- 

#defines pertinent to water potential
Rx = 1.0063894024855E-6; 		#[cm-4 h] resistance per unit length of xylem
WP0 = 0.0;                         #[MPa]
MolalVolumeSucrose = 0.6301;        #[g-1 cm3]  
Jw = 0.0;                        #[cm3 h-1] 

#defines pertinent to system structure
INDE_LENGTH = 5.0;     	# [cm]
START_SEGMENTS = 6;   	# number of segments to start on a shoot
MAX_SEGMENTS = 60;    	# number of segments on a shoot

INT_SINKj = 0.005;    	# [g h-1] maximun possible influx into the internode sink
PRIORITY_INT = 0.01;  	# [g cm-3]
PRIORITY_SINK = 0.01; 	# [g cm-3]

# -------------------------------------------------------------------------- 
# Declarations for carbon transport

#The structure representing a linearized organ/branch
class LinearData:
    def __init__(self, a, b):
      self.a = a #intercept of the terminal element
      self.b = b# slope of the terminal element

# The structure characterizing a sink/source

class SegmentData:
  def __init__(self, sink_source, r, branch_flux, j, cpt, cpb, err, C):
    self.sink_source = sink_source  # linear approximation of the sink/source function {a,b} 
    self.r = r                  # internode resistance
    self.branch_flux = branch_flux  # linear approximation of branch flux function 
    self.j = j                 # carbon flux into the sink/source part of the segment
    self.cpt = cpt                # carbon potential at the top node
    self.cpb = cpb                # carbon potential at the bottom node
    self.err = err               # current difference between iterations
    self.C = C                 # carbon in segment (structural or reserves)
  #Function incorporating flux from distal elements (Figure 4) adjusted for distributed sink
  def Update_Branch_Flux(self):
    denom = (1.0 + self.branch_flux.b*self.r +self.sink_source.b * self.r/2.0);
    self.branch_flux.a = (self.branch_flux.a + self.sink_source.a + (self.sink_source.a * self.branch_flux.b - self.branch_flux.a * self.sink_source.b) * self.r/2.0)/denom
    self.branch_flux.b = (self.branch_flux.b + self.sink_source.b)/denom 
      
  #Function to update the carbon in sink/source depending on carbon flow
  def Update_Carbon(self):
    self.C += self.j * DT
    if (self.C < 0.0) :
      self.C = 0.0
      
      
#Template for Segment initialisation to all zeros
InitSegmentData = SegmentData(LinearData(0.0, 0.0), 0.0, LinearData(0.0, 0.0), 0.0, 0.0, 0.0, 0.0, 0.0) 

# -------------------------------------------------------------------------- 
# Declarations for water transport

# The structure used for water transport
class HydraulicData:
  def __init__(self, rs, flow, pot, Mcf):
    self.rs = rs #hydraulic resistance
    self.flow = flow #water flow
    self.pot = pot #water potential 
    self.Mcf = Mcf #Munch counter flow
  

# template for hydraulic data initialisation
InitHydraulicData = HydraulicData(0.0,0.0,0.0,0.0) 

# -------------------------------------------------------------------------- 
# defines pertinent to simulation control

#define RUNS_TO_PRINT 1
END_SIM = DT * (MAX_SEGMENTS-START_SEGMENTS+5)


#Enumeration of computational phases
class Group :
  Develop = 1       # development phase
  WaterFlowEst = 21      # two phases for water flow
  WaterPotential = 22
  Linearise = 31      # five phases for carbon dynamics
  UpdateBranchFlux = 3
  UpdateCarbonPotential = 3
  UpdateFlow = 34
  Debug = 35	
  Output = 41      #output phase

# Declarations of global variables 
Phase = 1          # the current computation phase
Serror = 0       # the error in computation for carbon dynamics, measuring convergence to the solution
error_count = 0   # the number of times 'error' is above MAXERROR
sim_time = 0    # the current simulation time (steps of DT)
vis_time = 0     # the time to visualise the model

# Initialization of global variables
def Start():

  Phase = 1 #Develop
  Serror = 0
  error_count = 0
  sim_time = 0
  vis_time = 0

  #Set Output header information  
  FInit("output.csv","Test parameter settings output\nInternodelen,Segments,c0, SOURCEcp , R0, Rx, Jw, SOURCEj, SINKj, INT_SINKj, PRIORITY_INT, PRIORITY_SINK\n")

  # output parameter values
  FPrintf("output.csv","{:g},{:d},{:g},{:g},{:g},{:g},{:g},{:g},{:g},{:g},{:g},{:g}\n\n",INDE_LENGTH, MAX_SEGMENTS, c0, SOURCEcp , R0, Rx, Jw,SOURCEj, SINKj, INT_SINKj, PRIORITY_INT, PRIORITY_SINK)

  # Header for Internode output parameter values
  FPrintf("output.csv","Type,node,position,sim_time,sd_primary.r,sd_primary.j,sd_primary.cpt,h.pot,h.rs,h.flow,C\n")



# Processing at start of each derivation step 
def StartEach():
  global sim_time #usage of global variables inside functions
  # set rules to use for next phase 
  useGroup(Phase)
  # This switch statement controls derivation direction for the different phases of a model timestep 
  # specification of  phase computation is specified in the labelled groups following the axiom 
  match Phase:
  # growth and development phase
    case Group.Develop: 
      forward() 	                  # left to right pass of the string
      if (sim_time < END_SIM):
      # update simulation time
        sim_time += DT
      else :
        Print("End of simulation!\n")
        Stop() # stop simulation at end of run 
      
  # two phases for water flow 
    case 21 :              #group WaterFlowEst, right to left pass
      backward()         
      
    case 22:            #group WaterPotential, left to right pass         
      forward()
      
  # five phases for carbon dynamics 
    case 31:                 #group Linearise, left to right pass
      forward()
      
    case 3:          #group UpdateBranchFlux, right to left pass
      backward()
      
    case 3:     #group UpdateCarbonPotential, left to right pass
      forward()
      
    case 34:                #group UpdateFlow left to right pass
      forward()
      Serror = 0
      
    case 35:                     #group Debug, prints out info of all sinks/sources with error > MAX_ERROR
      FPrintf("Warning: error > MAXERROR (%g > %g) after %d iterations\n", Serror, MAXERROR, error_count)
      FPrintf("Dumping 'S' modules at sim_time %g:\n", sim_time)
      forward()
      
    case 41:                    #group Output, one phase for output 
      FPrintf ("Start of Output Phase at sim_time %g:\n", sim_time)
      forward()
      
  


# Processing at end of each derivation step  
def EndEach():
  global Phase
  global vis_time
  global error_count
  # this switch statement determines next phase type
  match Phase:
  
    # growth and development phase
    case Group.Develop:
      if (sim_time <= END_SIM):
          Phase = Group.WaterFlowEst	    # switch to hydraulic processing
          # Set to display frame if appropriate
          if (sim_time >= vis_time):
            frameDisplay()
            vis_time += VIS_STEP
            
          error_count = 0
          
          
    # two phases for water flow 
    case Group.WaterFlowEst:
      Phase = Group.WaterPotential
      
    case Group.WaterPotential:
      Phase = Group.Linearise	   # switch to carbon processing 
      
    # five phases for carbon dynamics */
    case Group.Linearise:
      Phase = Group.UpdateBranchFlux
      
    case Group.UpdateBranchFlux:
      Phase = Group.UpdateCarbonPotential
      
    case Group.UpdateCarbonPotential:
      Phase = Group.UpdateFlow
      
    case Group.UpdateFlow:
      if (Serror < MAXERROR):     # successful flow update processing
        if (sim_time >= END_SIM-DT*RUNS_TO_PRINT): # change to output phase at end of run
          Phase = Group.Output
        else : # continue to next step
          Phase = Group.Develop
        error_count = 0
      
      else : # further processing necessary
        if (error_count > 1000): # too many passes? 
        # report problem
          Phase = Group.Debug
        else :
        # iterate process
          ++error_count
          Phase = Group.Linearise
      
    case Group.Debug:                 # stop after debug 
      Stop()
      
    case Group.Output:                # one phase for output             
      FPrintf("End of Output Phase at time %g:\n", sim_time)
      Phase = Group.Develop
      
      
# -------------------------------------------------------------------------- 
# module type declarations
module S(SegmentData),          # a sink/source component
module Hd(HydraulicData),       # a hydraulics component
module Internode(int,float),    # internode with attributes: node,length 
module Sink(int),            	# sink with attributes: node
module TestCase(),              # the initial setup of structure
# -------------------------------------------------------------------------- 

Axiom: TestCase()

derivation length: 999999


production:

decomposition:

TestCase():
  # each segment of shoot is modelled as one internode
  sd_internode_primary = copy.deepcopy(InitSegmentData)
  sd_sink = copy.deepcopy(InitSegmentData)
  sd_source = copy.deepcopy(InitSegmentData)
  
  h_internode = copy.deepcopy(InitHydraulicData)
  h_sink = copy.deepcopy(InitHydraulicData)
  
  h_internode.rs = Rx * INDE_LENGTH 	# hydraulic resistance
  h_internode.pot = -Jw*Rx*INDE_LENGTH # initial hydraulic potential
  
  # set the resistance along transport pathway (in the first S module associated with Internode)
  Rs = ( R0 * PhloemResistanceRatio(c0)/(PressureRatio(c0)*R*T))   # resistance per unit length (initial case)
  sd_internode_primary.r = Rs*INDE_LENGTH  # based on Alistair's parameters  

  # source at base is defined as a boundary condition in UpdateCarbonPotential code
  # produce segments 
  for node in range (1,START_SEGMENTS+1): 
    # initial conditions for cp top and bottom
    sd_internode_primary.cpt = SOURCEcp - node * INDE_LENGTH * (SOURCEj - INT_SINKj * node * INDE_LENGTH/2) * Rs    
    sd_internode_primary.cpb = SOURCEcp - (node-1) * INDE_LENGTH * (SOURCEj - INT_SINKj * node * INDE_LENGTH/2) * Rs
    nproduce (Internode(node,INDE_LENGTH)S(sd_internode_primary)Hd(h_internode)SB()EB())# to ensure consistency for rule matching, place SB() EB() here, where a leaf would be.
    
  # produce sink 
  sd_sink.j = SINKj  # initialise for test case 1 
  sd_sink.cpt = SOURCEcp - MAX_SEGMENTS * INDE_LENGTH * SOURCEj * Rs 
  sd_sink.cpb = SOURCEcp - MAX_SEGMENTS * INDE_LENGTH * SOURCEj * Rs
  h_sink.flow = Jw
  produce (Sink(START_SEGMENTS+1)S(sd_sink)Hd(h_sink)SB()EB())#to ensure consistency for rule matching, place SB() EB() here, where a leaf would have been.
  
production : 
#-------------------------------------------------------- 
#                 Development Rules 
#-------------------------------------------------------- 

group 1: # update of parameters


Internode(node,length) S(sd_primary)  Hd(h): 
  #accumulate carbon for primary growth
  sd_primary.Update_Carbon()
  carbon = sqrt(sd_primary.cpb + sd_primary.cpt)
  #set resistance along transport pathway based on local C concentration (derived from average carbon potential)
  sd_primary.r = R0 * PhloemResistanceRatio(carbon) / (PressureRatio(carbon)*R*T)*INDE_LENGTH
  
  #Effect of phloem flux on hydraulic flow: Munch counter flow (following Equation 5) 
  branchj = sd_primary.branch_flux.a + sd_primary.branch_flux.b * sd_primary.cpb
  h.Mcf = MolalVolumeSucrose * branchj - branchj / carbon
  
  produce Internode(node,length) S(sd_primary) Hd(h)


# Update sink, if necessary, create new segment before sink with same content as previous segment 
Internode(inode,ilength) S(sd_internode_primary) Hd(h_internode) << Sink(node) S(sd_sink)  Hd(h):
  #update sink size
  sd_sink.Update_Carbon()
  if (inode<MAX_SEGMENTS):# produce new internodes every develop step, until maximum number reached
  		nproduce (Internode(inode+1,ilength)S(sd_internode_primary)Hd(h_internode)SB() EB()) #to ensure consistency for rule matching, place SB() EB() here, where a leaf would have been.
  		node = node+1
  		Printf("new node: %d\n", inode+1)
  produce Sink(node) S(sd_sink)Hd(h)

S(sd):
  #if r == INFTY this is an inert S between branches
  if (sd.r != 0.0 or sd.sink_source.a != 0.0 or sd.sink_source.b != 0.0):
    Printf ("PANIC! Orphan S() module found. Check 'Develop' phase.\n") 
  produce S(sd)
  
  
  
# -------------------------------------------------------------------------- 


# Carbon Dynamics Phaes defined as groups 

group 31: # linearise equations for sinks/sources 


Internode(node,length) S(sd_primary) :
  #carbon flux function is set
  sd_primary.sink_source.a = INT_SINKj *(SinkUnloading(sd_primary.cpt, PRIORITY_INT)-sd_primary.cpt	* dSinkUnloading_dcp (sd_primary.cpt, PRIORITY_INT))
  sd_primary.sink_source.b = INT_SINKj *dSinkUnloading_dcp (sd_primary.cpt, PRIORITY_INT)
  produce Internode(node,length) S(sd_primary) 



Sink(node) S(sd_sink) :
  sd_sink.sink_source.a = SINKj *(SinkUnloading(sd_sink.cpt, PRIORITY_SINK)-sd_sink.cpt * dSinkUnloading_dcp (sd_sink.cpt, PRIORITY_SINK));
  sd_sink.sink_source.b = SINKj *dSinkUnloading_dcp (sd_sink.cpt, PRIORITY_SINK);  
  produce Sink(node) S(sd_sink)



S(sd):
  # if r, a and b == 0 this is an inert S between branches
  if (sd.r != 0.0 or sd.sink_source.a != 0.0 or sd.sink_source.b != 0.0):
    Printf ("PANIC! Orphan S() module found. Check 'UpdateDemand' phase.\n")
  produce S(sd)


# -------------------------------------------------------------------------- 
# calculate equivalent sink/source function of the  branch starting at the base

group 3:	

consider: S

S(sd) >> SB() S(sdr2) EB() S(sdr1): 
  sd.branch_flux.a = sdr1.branch_flux.a+sdr2.branch_flux.a
  sd.branch_flux.b = sdr1.branch_flux.b+sdr2.branch_flux.b
  sd.Update_Branch_Flux()
  produce S(sd)


S(sd) >> SB() S(sdr) EB():
  sd.branch_flux.a = sdr.branch_flux.a
  sd.branch_flux.b = sdr.branch_flux.b
  sd.Update_Branch_Flux()
  produce S(sd)



S(sd) >> S(sdr):
  sd.branch_flux.a = sdr.branch_flux.a
  sd.branch_flux.b = sdr.branch_flux.b
  sd.Update_Branch_Flux()
  produce S(sd)



S(sd):
  sd.branch_flux.a = 0
  sd.branch_flux.b = 0
  sd.Update_Branch_Flux()
  produce S(sd)

# -------------------------------------------------------------------------- 

group 3: # find the concentration of carbon along transport pathway

consider: S

# calculate the carbon potentials; estimate the error
S(sdl) << S(sd):
  sd.cpb = sdl.cpt
  sd.cpt = (sd.cpb*(1.0 - sd.branch_flux.b*sd.r) - sd.branch_flux.a*sd.r + sd.sink_source.a*sd.r/2.)/(1- sd.sink_source.b*sd.r/2.); 
  produce S(sd)

S(sd):
  #Boundary condition sets carbon potential at the bottom equal to SOURCEcp
  sd.cpb = SOURCEcp
  #calculation for carbon potential at the top
  sd.cpt = (sd.cpb*(1.0 - sd.branch_flux.b*sd.r) - sd.branch_flux.a*sd.r + sd.sink_source.a*sd.r/2.)/(1- sd.sink_source.b*sd.r/2.); 
  produce S(sd)




# -------------------------------------------------------------------------- 

group 34: # update the flow of carbon into each sink/source

S(sd) :
  #extern float Serror
  #float new_j, divisor
  
  if (sd.cpt >= 0.0):
    # Calculate new flux into sink_source
    new_j = sd.sink_source.a + sd.sink_source.b * sd.cpt
    # Calculate error and save for display purposes
    sd.err = new_j - sd.j
    # Calculate cumulative error to determine whether it is possible to stop
    Serror += abs(sd.err)
    # Update flux to be consistent with present values of cpt
    # check for minimum current
    if (abs(new_j) < EPSILON):
      sd.j = 0.0
    else :
      sd.j = new_j
  else : # cpt < 0! Reset the Newton-Raphson method, with cpt as zero
    sd.cpt = 0.0
    sd.err = 1.0
    Serror += 1.0
  
  produce S(sd)


# -------------------------------------------------------------------------- 

group 35: # if error doesn't fall below MAXERROR after many iterations, output debug info

S(sd):
  if (sd.err > MAXERROR):
    Printf("C:%g j:%g cpt:%g err:%g\n", sd.C, sd.j, sd.cpt, sd.err)
  produce S(sd)



# --------------------------------------------------------------------------- 
#Accumulate water flows from right to left                                 

group 21:

consider: Hd

Hd(h) >> SB() EB() SB() Hd(hr):
  h.flow = hr.flow
  produce Hd(h)

Hd(h) >> SB() Hd(hr2) EB() Hd(hr1):
  h.flow = hr1.flow + hr2.flow
  produce Hd(h)

Hd(h) >> SB() Hd(hr) EB():
  h.flow = hr.flow
  produce Hd(h)

Hd(h) >> Hd(hr):
  h.flow = hr.flow
  produce Hd(h)

Hd(h):
  produce Hd(h)

# ----------------------------------------------------------------------------- 
# Calculate water potential from left to right incorporating Munch counter flow 


group 22:

Hd(hl) << Hd(h):
  h.pot = hl.pot - (h.flow + h.Mcf) * h.rs
  produce Hd(h)
  
Hd(h):
  h.pot = -(h.flow + h.Mcf) * h.rs
  produce Hd(h)


# -------------------------------------------------------------------- 
# at every OUTPUT_STEP time step, write model output to a file         

group 41: 

Internode(node,length)S(sd_primary)Hd(h): 
  FPrintf("output.csv","Int,%d,%g,%g,%g,%g,%g,%g,%g,%g,%g\n", node, node*length, sim_time, sd_primary.r, sd_primary.j, sd_primary.cpt,h.pot, h.rs, h.flow,sqrt(2.0*sd_primary.cpt))
  produce Internode(node,length)S(sd_primary)Hd(h) 

Sink(node)S(sd_sink)Hd(h):
  FPrintf("output.csv","Snk,%d,%g,%g,%g,%g,%g,%g,%g,%g,%g\n", node, (node-1)*INDE_LENGTH, sim_time, sd_sink.r, sd_sink.j, sd_sink.cpt,h.pot, h.rs, h.flow,sqrt(2.0*sd_sink.cpt))
  produce Sink(node)S(sd_sink)Hd(h)

# -------------------------------------------------------------------------- 
# Default Group ------------------------------------------------------------ 

group 0:

# Visualisation ------------------------------------------------------------ 

interpretation:

maximum depth: 2


Internode(node,length)  S(sd_primary)  Hd(h): 
  colour = 15
  produce SetColor(colour) SetWidth(1) F(length)
  
Sink(node):
  radius= 0.5
  produce SB() SetColor(13) f(radius) Sphere(radius)EB()
  
  
endlsystem

###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_13 = pgl.Material("Color_13" , ambient = (80,0,1) , )
	Color_13.name = "Color_13"
	context.turtle.setMaterial(13,Color_13)
	Color_15 = pgl.Material("Color_15" , ambient = (45,152,37) , diffuse = 1.05263 , )
	Color_15.name = "Color_15"
	context.turtle.setMaterial(15,Color_15)
